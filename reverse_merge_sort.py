# -*- coding: utf-8 -*-
"""reverse_merge_sort.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18wSLnMTpqk82OuTjuoPL39vrYUP4fXYI
"""

# for i in range(23, 10, -1):
#   print(i)

# def bubblesort(nums) :
#   for i in range(len(nums)-1, 0 , -1):
#     for j in range(i):
#       if nums[j]<nums[j+1]:
#         nums[j], nums[j+1] = nums[j+1], nums[j]
#   return nums

# nums = [5, 3, 8 , 6, 7, 2]

# bubblesort(nums)

# nums

def merge_sort(arr):
  if len(arr) > 1:
    left_arr = arr[:len(arr)//2]
    right_arr = arr[len(arr)//2:]

    #recursion

    merge_sort(left_arr)
    merge_sort(right_arr)

    #merge

    i,j,k = 0,0,0

    while i<len(left_arr) and j<len(right_arr):
      if left_arr[i]<right_arr[j]:
        arr[k] = left_arr[i]
        i+=1
      else:
        arr[k] = right_arr[j]
        j+=1
      k+=1

    while i<len(left_arr):
      arr[k] = left_arr[i]
      i+=1
      k+=1

    while j<len(right_arr):
      arr[k] = right_arr[j]
      j+=1
      k+=1

  return arr

def reverse_merge_sort(arr):
  if len(arr) > 1:
    left_arr = arr[:len(arr)//2]
    right_arr = arr[len(arr)//2:]

    #recursion

    reverse_merge_sort(left_arr)
    reverse_merge_sort(right_arr)

    #merge

    i,j,k = 0,0,0

    while i<len(left_arr) and j<len(right_arr):
      if left_arr[i]>right_arr[j]:
        arr[k] = left_arr[i]
        i+=1
      else:
        arr[k] = right_arr[j]
        j+=1
      k+=1

    while i<len(left_arr):
      arr[k] = left_arr[i]
      i+=1
      k+=1

    while j<len(right_arr):
      arr[k] = right_arr[j]
      j+=1
      k+=1

  return arr

arr = [6, 3, 8 , 6, 7, 2, 1]

print(merge_sort(arr))

print(reverse_merge_sort(arr))

